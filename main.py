import os
import time
import logging
import argparse
import multiprocessing

from data_loader import NVDDataLoader
from nvd_data_extractor import NVDDataExtractor
from data_transformer import NVDDataTransformer


def extract_data(
    transformation_queue: multiprocessing.Queue, extraction_completion_flag: bool
):
    extractor = NVDDataExtractor(transformation_queue, extraction_completion_flag)
    extractor.extract_data()


def transform_data(
    transformation_queue: multiprocessing.Queue,
    loading_queue: multiprocessing.Queue,
    extraction_completion_flag: bool,
    transformation_completion_flag: bool,
):
    transformer = NVDDataTransformer(
        transformation_completion_flag=transformation_completion_flag,
        extraction_completion_flag=extraction_completion_flag,
        loading_queue=loading_queue,
        transformation_queue=transformation_queue,
    )
    transformer.transform()


def load_data(
    loading_queue: multiprocessing.Queue, transformation_completion_flag: bool
):
    loader = NVDDataLoader(loading_queue, transformation_completion_flag)
    loader.load_data()


def cli_arguments():
    arguement_parser = argparse.ArgumentParser()
    argument_parser.add_argument(
        "-y", "--year", help="Year of CVE data to be extracted", default=2010
    )
    argument_parser.add_argument(
        "-m", "--month", help="Month of CVE data to be extracted", default=1
    )
    arguement_parser.add_argument(
        "-d", "--date", help="Date of CVE data to be extracted", default=1
    )
    args = arguement_parser.parse_args()
    return args


def main():
    args = cli_arguments()
    logging.info("Creating Queues and Flags")
    transformation_queue = multiprocessing.Queue()
    loading_queue = multiprocessing.Queue()

    extraction_completion_flag = False
    transformation_completion_flag = False

    extraction_process = multiprocessing.Process(
        target=extract_data,
        args=(
            transformation_queue,
            extraction_completion_flag,
            args,
        ),
    )
    transformation_process = multiprocessing.Process(
        target=transform_data,
        args=(
            transformation_queue,
            loading_queue,
            extraction_completion_flag,
            transformation_completion_flag,
        ),
    )
    loading_process = multiprocessing.Process(
        target=load_data,
        args=(
            loading_queue,
            transformation_completion_flag,
        ),
    )

    logging.info("Triggering Process execution")
    extraction_process.start()
    transformation_process.start()
    loading_process.start()

    logging.info("Waiting for processes to complete")
    transformation_queue.close()
    loading_queue.close()

    extraction_process.join()
    transformation_process.join()
    loading_process.join()


if __name__ == "__main__":
    os.makedirs("logs", exist_ok=True)
    os.makedirs("data", exist_ok=True)
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(levelname)s - %(message)s",
        datefmt="%d-%b-%y %H:%M:%S",
        filename="logs/execution.log",
        filemode="w",
    )
    main()
