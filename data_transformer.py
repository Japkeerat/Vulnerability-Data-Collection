import logging
from multiprocessing import Queue

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s", datefmt="%d-%b-%y %H:%M:%S", filename="logs/data_transformer.log")

class NVDDataTransformer:
    def __init__(
        self,
        transformation_queue: Queue,
        loading_queue: Queue,
        extraction_completion_flag: bool,
        transformation_completion_flag: bool,
    ):
        self.transformation_queue = transformation_queue
        self.loading_queue = loading_queue
        self.extraction_completion_flag = extraction_completion_flag
        self.transformation_completion_flag = transformation_completion_flag

    def clean_data(self, data) -> tuple:
        cve_id = data.id
        try:
            cwe_id = data.cwe[0].value
        except:
            cwe_id = None
        try:
            cpe_id = data.cpe[0].criteria
        except:
            cpe_id = None
        description = data.descriptions[0].value
        return (cve_id, cwe_id, cpe_id, description)

    def transform(self):
        logging.info(f"Starting the transformation process")
        while (
            not self.extraction_completion_flag or not self.transformation_queue.empty()
        ):  # TODO: Check if this is the right way to check if the queue is empty
            data = self.transformation_queue.get()
            data = self.clean_data(data)
            self.loading_queue.put(data)
        logging.info(f"Transformation process completed")
        self.transformation_completion_flag = True
