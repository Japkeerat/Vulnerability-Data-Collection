import os
import time
import logging
from multiprocessing import Queue
from datetime import datetime, timedelta

import nvdlib

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s", datefmt="%d-%b-%y %H:%M:%S", filename="logs/data_extractor.log")

class NVDDataExtractor:
    def __init__(self, transformation_queue: Queue, extraction_completion_flag: bool):
        self.transform_queue = transformation_queue
        self.nvd_api_key = os.getenv("NVD_API_KEY")
        self.extraction_completion_flag = extraction_completion_flag

    def find_start_date(self) -> datetime:
        # TODO: It should query the database to find the last date that was extracted
        # Currently, it is hardcoded to 1st January 2010
        start_date = datetime(2010, 1, 1)
        return start_date

    def enqueue_records(self, records: list):
        logging.info(f"Putting fetched records in the transformation queue.")
        for record in records:
            self.transform_queue.put(record)

    def extract_data(self):
        start_date = self.find_start_date()
        today_date = datetime.now().date()
        delta = timedelta(weeks=1)
        logging.info(f"Starting with extracting data from NVD API. Starting from {start_date.strftime('%m/%d/%Y')}")
        failure_counter = 0
        while start_date.date() < today_date:
            end_date = start_date + delta
            if end_date.date() > today_date:
                end_date = datetime(today_date.year, today_date.month, today_date.day)
            try:
                logging.info(f"API Hit starting... Start Date: {start_date.strftime('%m/%d/%Y')}, End Date: {end_date.strftime('%m/%d/%Y')}")
                records = nvdlib.searchCVE(
                    pubStartDate=start_date, pubEndDate=end_date, key=self.nvd_api_key
                )
                logging.info(f"API Hit Succeeded. Got {len(records)} records.")
                self.enqueue_records(records)
                start_date = end_date
            except Exception as e:
                logging.error(f"Error while extracting data from NVD API: {e}")
                failure_counter += 1
                if failure_counter > 5:
                    logging.error("Extraction failed 5 times in a row. Exiting...")
                    break
                logging.info("Extraction going to sleep for 3 minutes")
                time.sleep(180)
        logging.info(f"Extraction process completed")
        self.extraction_completion_flag = True
